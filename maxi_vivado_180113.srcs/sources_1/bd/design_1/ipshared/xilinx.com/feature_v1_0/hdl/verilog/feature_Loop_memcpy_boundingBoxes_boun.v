// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_Loop_memcpy_boundingBoxes_boun (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_bounding_AWVALID,
        m_axi_bounding_AWREADY,
        m_axi_bounding_AWADDR,
        m_axi_bounding_AWID,
        m_axi_bounding_AWLEN,
        m_axi_bounding_AWSIZE,
        m_axi_bounding_AWBURST,
        m_axi_bounding_AWLOCK,
        m_axi_bounding_AWCACHE,
        m_axi_bounding_AWPROT,
        m_axi_bounding_AWQOS,
        m_axi_bounding_AWREGION,
        m_axi_bounding_AWUSER,
        m_axi_bounding_WVALID,
        m_axi_bounding_WREADY,
        m_axi_bounding_WDATA,
        m_axi_bounding_WSTRB,
        m_axi_bounding_WLAST,
        m_axi_bounding_WID,
        m_axi_bounding_WUSER,
        m_axi_bounding_ARVALID,
        m_axi_bounding_ARREADY,
        m_axi_bounding_ARADDR,
        m_axi_bounding_ARID,
        m_axi_bounding_ARLEN,
        m_axi_bounding_ARSIZE,
        m_axi_bounding_ARBURST,
        m_axi_bounding_ARLOCK,
        m_axi_bounding_ARCACHE,
        m_axi_bounding_ARPROT,
        m_axi_bounding_ARQOS,
        m_axi_bounding_ARREGION,
        m_axi_bounding_ARUSER,
        m_axi_bounding_RVALID,
        m_axi_bounding_RREADY,
        m_axi_bounding_RDATA,
        m_axi_bounding_RLAST,
        m_axi_bounding_RID,
        m_axi_bounding_RUSER,
        m_axi_bounding_RRESP,
        m_axi_bounding_BVALID,
        m_axi_bounding_BREADY,
        m_axi_bounding_BRESP,
        m_axi_bounding_BID,
        m_axi_bounding_BUSER,
        bounding1,
        frame_in,
        featureh,
        frame_in_out_din,
        frame_in_out_full_n,
        frame_in_out_write,
        featureh_out_din,
        featureh_out_full_n,
        featureh_out_write,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_pp0_stg0_fsm_7 = 9'b10000000;
parameter    ap_ST_st11_fsm_8 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_bounding_AWVALID;
input   m_axi_bounding_AWREADY;
output  [31:0] m_axi_bounding_AWADDR;
output  [0:0] m_axi_bounding_AWID;
output  [31:0] m_axi_bounding_AWLEN;
output  [2:0] m_axi_bounding_AWSIZE;
output  [1:0] m_axi_bounding_AWBURST;
output  [1:0] m_axi_bounding_AWLOCK;
output  [3:0] m_axi_bounding_AWCACHE;
output  [2:0] m_axi_bounding_AWPROT;
output  [3:0] m_axi_bounding_AWQOS;
output  [3:0] m_axi_bounding_AWREGION;
output  [0:0] m_axi_bounding_AWUSER;
output   m_axi_bounding_WVALID;
input   m_axi_bounding_WREADY;
output  [15:0] m_axi_bounding_WDATA;
output  [1:0] m_axi_bounding_WSTRB;
output   m_axi_bounding_WLAST;
output  [0:0] m_axi_bounding_WID;
output  [0:0] m_axi_bounding_WUSER;
output   m_axi_bounding_ARVALID;
input   m_axi_bounding_ARREADY;
output  [31:0] m_axi_bounding_ARADDR;
output  [0:0] m_axi_bounding_ARID;
output  [31:0] m_axi_bounding_ARLEN;
output  [2:0] m_axi_bounding_ARSIZE;
output  [1:0] m_axi_bounding_ARBURST;
output  [1:0] m_axi_bounding_ARLOCK;
output  [3:0] m_axi_bounding_ARCACHE;
output  [2:0] m_axi_bounding_ARPROT;
output  [3:0] m_axi_bounding_ARQOS;
output  [3:0] m_axi_bounding_ARREGION;
output  [0:0] m_axi_bounding_ARUSER;
input   m_axi_bounding_RVALID;
output   m_axi_bounding_RREADY;
input  [15:0] m_axi_bounding_RDATA;
input   m_axi_bounding_RLAST;
input  [0:0] m_axi_bounding_RID;
input  [0:0] m_axi_bounding_RUSER;
input  [1:0] m_axi_bounding_RRESP;
input   m_axi_bounding_BVALID;
output   m_axi_bounding_BREADY;
input  [1:0] m_axi_bounding_BRESP;
input  [0:0] m_axi_bounding_BID;
input  [0:0] m_axi_bounding_BUSER;
input  [31:0] bounding1;
input  [31:0] frame_in;
input  [31:0] featureh;
output  [31:0] frame_in_out_din;
input   frame_in_out_full_n;
output   frame_in_out_write;
output  [31:0] featureh_out_din;
input   featureh_out_full_n;
output   featureh_out_write;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_bounding_ARVALID;
reg m_axi_bounding_RREADY;
reg frame_in_out_write;
reg featureh_out_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg   [15:0] boundingBoxes_3_out_i_i_reg_124;
reg   [15:0] boundingBoxes_2_out_i_i_reg_136;
reg   [15:0] boundingBoxes_3_2_reg_148;
reg   [15:0] boundingBoxes_3_5_reg_160;
reg   [2:0] indvar_i_i_i_reg_172;
reg    ap_sig_bdd_122;
reg    ap_sig_ioackin_m_axi_bounding_ARREADY;
wire   [0:0] exitcond_i_i_i_fu_204_p2;
reg   [0:0] exitcond_i_i_i_reg_323;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_7;
reg    ap_sig_bdd_135;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_142;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_i_i_i_reg_323_pp0_it1;
wire   [2:0] indvar_next_i_i_i_fu_210_p2;
wire   [1:0] tmp_12_fu_216_p1;
reg   [1:0] tmp_12_reg_332;
reg   [1:0] ap_reg_ppstg_tmp_12_reg_332_pp0_it1;
reg   [15:0] boundingBoxes_0_reg_339;
wire   [15:0] boundingBoxes_3_fu_248_p3;
wire   [15:0] boundingBoxes_3_1_fu_263_p3;
wire   [15:0] boundingBoxes_3_4_fu_278_p3;
wire   [15:0] boundingBoxes_3_6_fu_286_p3;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_181;
reg    ap_sig_bdd_186;
wire   [63:0] tmp_11_fu_193_p1;
reg    ap_reg_ioackin_m_axi_bounding_ARREADY = 1'b0;
wire   [30:0] tmp_fu_183_p4;
wire   [0:0] sel_tmp4_i_i_fu_230_p2;
wire   [0:0] sel_tmp2_i_i_fu_225_p2;
wire   [0:0] sel_tmp_i_i_fu_220_p2;
wire   [0:0] or_cond_i_i_fu_235_p2;
wire   [15:0] newSel4_i_i_fu_241_p3;
wire   [15:0] newSel_i_i_fu_256_p3;
wire   [15:0] boundingBoxes_3_3_fu_271_p3;
reg    ap_sig_cseq_ST_st11_fsm_8;
reg    ap_sig_bdd_280;
reg   [8:0] ap_NS_fsm;
reg    ap_sig_bdd_371;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_m_axi_bounding_ARREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~(ap_sig_bdd_122 | (ap_const_logic_0 == ap_sig_ioackin_m_axi_bounding_ARREADY))) begin
                ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_0;
            end else if (ap_sig_bdd_371) begin
                ap_reg_ioackin_m_axi_bounding_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186)) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2))) begin
        indvar_i_i_i_reg_172 <= indvar_next_i_i_i_fu_210_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186)) begin
        indvar_i_i_i_reg_172 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        ap_reg_ppstg_exitcond_i_i_i_reg_323_pp0_it1 <= exitcond_i_i_i_reg_323;
        ap_reg_ppstg_tmp_12_reg_332_pp0_it1 <= tmp_12_reg_332;
        exitcond_i_i_i_reg_323 <= exitcond_i_i_i_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_lv1_0 == exitcond_i_i_i_reg_323) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        boundingBoxes_0_reg_339 <= m_axi_bounding_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond_i_i_i_reg_323_pp0_it1))) begin
        boundingBoxes_2_out_i_i_reg_136 <= boundingBoxes_3_1_fu_263_p3;
        boundingBoxes_3_2_reg_148 <= boundingBoxes_3_4_fu_278_p3;
        boundingBoxes_3_5_reg_160 <= boundingBoxes_3_6_fu_286_p3;
        boundingBoxes_3_out_i_i_reg_124 <= boundingBoxes_3_fu_248_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2))) begin
        tmp_12_reg_332 <= tmp_12_fu_216_p1;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st11_fsm_8) begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st11_fsm_8) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_8)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_135) begin
    if (ap_sig_bdd_135) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_280) begin
    if (ap_sig_bdd_280) begin
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_28) begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_181) begin
    if (ap_sig_bdd_181) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (m_axi_bounding_ARREADY or ap_reg_ioackin_m_axi_bounding_ARREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_bounding_ARREADY)) begin
        ap_sig_ioackin_m_axi_bounding_ARREADY = m_axi_bounding_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_bounding_ARREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_bdd_186) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186)) begin
        featureh_out_write = ap_const_logic_1;
    end else begin
        featureh_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_bdd_186) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~ap_sig_bdd_186)) begin
        frame_in_out_write = ap_const_logic_1;
    end else begin
        frame_in_out_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_122 or ap_reg_ioackin_m_axi_bounding_ARREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_122 & (ap_const_logic_0 == ap_reg_ioackin_m_axi_bounding_ARREADY))) begin
        m_axi_bounding_ARVALID = ap_const_logic_1;
    end else begin
        m_axi_bounding_ARVALID = ap_const_logic_0;
    end
end

always @ (exitcond_i_i_i_reg_323 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_sig_bdd_142 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_lv1_0 == exitcond_i_i_i_reg_323) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        m_axi_bounding_RREADY = ap_const_logic_1;
    end else begin
        m_axi_bounding_RREADY = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_122 or ap_sig_ioackin_m_axi_bounding_ARREADY or exitcond_i_i_i_fu_204_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_142 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_sig_bdd_186) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_sig_bdd_122 | (ap_const_logic_0 == ap_sig_ioackin_m_axi_bounding_ARREADY))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~ap_sig_bdd_186) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_pp0_stg0_fsm_7 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_142 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(ap_const_lv1_0 == exitcond_i_i_i_fu_204_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st11_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            end
        end
        ap_ST_st11_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return_0 = boundingBoxes_3_out_i_i_reg_124;

assign ap_return_1 = boundingBoxes_2_out_i_i_reg_136;

assign ap_return_2 = boundingBoxes_3_2_reg_148;

assign ap_return_3 = boundingBoxes_3_5_reg_160;


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_122 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_135 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (m_axi_bounding_RVALID or exitcond_i_i_i_reg_323) begin
    ap_sig_bdd_142 = ((m_axi_bounding_RVALID == ap_const_logic_0) & (ap_const_lv1_0 == exitcond_i_i_i_reg_323));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_181 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (frame_in_out_full_n or featureh_out_full_n) begin
    ap_sig_bdd_186 = ((frame_in_out_full_n == ap_const_logic_0) | (featureh_out_full_n == ap_const_logic_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_280 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (m_axi_bounding_ARREADY or ap_sig_bdd_122) begin
    ap_sig_bdd_371 = ((ap_const_logic_1 == m_axi_bounding_ARREADY) & ~ap_sig_bdd_122);
end

assign boundingBoxes_3_1_fu_263_p3 = ((or_cond_i_i_fu_235_p2[0:0] === 1'b1) ? boundingBoxes_2_out_i_i_reg_136 : newSel_i_i_fu_256_p3);

assign boundingBoxes_3_3_fu_271_p3 = ((sel_tmp2_i_i_fu_225_p2[0:0] === 1'b1) ? boundingBoxes_0_reg_339 : boundingBoxes_3_2_reg_148);

assign boundingBoxes_3_4_fu_278_p3 = ((sel_tmp4_i_i_fu_230_p2[0:0] === 1'b1) ? boundingBoxes_3_2_reg_148 : boundingBoxes_3_3_fu_271_p3);

assign boundingBoxes_3_6_fu_286_p3 = ((sel_tmp4_i_i_fu_230_p2[0:0] === 1'b1) ? boundingBoxes_0_reg_339 : boundingBoxes_3_5_reg_160);

assign boundingBoxes_3_fu_248_p3 = ((or_cond_i_i_fu_235_p2[0:0] === 1'b1) ? boundingBoxes_3_out_i_i_reg_124 : newSel4_i_i_fu_241_p3);

assign exitcond_i_i_i_fu_204_p2 = (indvar_i_i_i_reg_172 == ap_const_lv3_4? 1'b1: 1'b0);

assign featureh_out_din = featureh;

assign frame_in_out_din = frame_in;

assign indvar_next_i_i_i_fu_210_p2 = (indvar_i_i_i_reg_172 + ap_const_lv3_1);

assign m_axi_bounding_ARADDR = tmp_11_fu_193_p1;

assign m_axi_bounding_ARBURST = ap_const_lv2_0;

assign m_axi_bounding_ARCACHE = ap_const_lv4_0;

assign m_axi_bounding_ARID = ap_const_lv1_0;

assign m_axi_bounding_ARLEN = ap_const_lv32_4;

assign m_axi_bounding_ARLOCK = ap_const_lv2_0;

assign m_axi_bounding_ARPROT = ap_const_lv3_0;

assign m_axi_bounding_ARQOS = ap_const_lv4_0;

assign m_axi_bounding_ARREGION = ap_const_lv4_0;

assign m_axi_bounding_ARSIZE = ap_const_lv3_0;

assign m_axi_bounding_ARUSER = ap_const_lv1_0;

assign m_axi_bounding_AWADDR = ap_const_lv32_0;

assign m_axi_bounding_AWBURST = ap_const_lv2_0;

assign m_axi_bounding_AWCACHE = ap_const_lv4_0;

assign m_axi_bounding_AWID = ap_const_lv1_0;

assign m_axi_bounding_AWLEN = ap_const_lv32_0;

assign m_axi_bounding_AWLOCK = ap_const_lv2_0;

assign m_axi_bounding_AWPROT = ap_const_lv3_0;

assign m_axi_bounding_AWQOS = ap_const_lv4_0;

assign m_axi_bounding_AWREGION = ap_const_lv4_0;

assign m_axi_bounding_AWSIZE = ap_const_lv3_0;

assign m_axi_bounding_AWUSER = ap_const_lv1_0;

assign m_axi_bounding_AWVALID = ap_const_logic_0;

assign m_axi_bounding_BREADY = ap_const_logic_0;

assign m_axi_bounding_WDATA = ap_const_lv16_0;

assign m_axi_bounding_WID = ap_const_lv1_0;

assign m_axi_bounding_WLAST = ap_const_logic_0;

assign m_axi_bounding_WSTRB = ap_const_lv2_0;

assign m_axi_bounding_WUSER = ap_const_lv1_0;

assign m_axi_bounding_WVALID = ap_const_logic_0;

assign newSel4_i_i_fu_241_p3 = ((sel_tmp_i_i_fu_220_p2[0:0] === 1'b1) ? boundingBoxes_3_out_i_i_reg_124 : boundingBoxes_0_reg_339);

assign newSel_i_i_fu_256_p3 = ((sel_tmp_i_i_fu_220_p2[0:0] === 1'b1) ? boundingBoxes_0_reg_339 : boundingBoxes_2_out_i_i_reg_136);

assign or_cond_i_i_fu_235_p2 = (sel_tmp4_i_i_fu_230_p2 | sel_tmp2_i_i_fu_225_p2);

assign sel_tmp2_i_i_fu_225_p2 = (ap_reg_ppstg_tmp_12_reg_332_pp0_it1 == ap_const_lv2_1? 1'b1: 1'b0);

assign sel_tmp4_i_i_fu_230_p2 = (ap_reg_ppstg_tmp_12_reg_332_pp0_it1 == ap_const_lv2_0? 1'b1: 1'b0);

assign sel_tmp_i_i_fu_220_p2 = (ap_reg_ppstg_tmp_12_reg_332_pp0_it1 == ap_const_lv2_2? 1'b1: 1'b0);

assign tmp_11_fu_193_p1 = tmp_fu_183_p4;

assign tmp_12_fu_216_p1 = indvar_i_i_i_reg_172[1:0];

assign tmp_fu_183_p4 = {{bounding1[ap_const_lv32_1F : ap_const_lv32_1]}};


endmodule //feature_Loop_memcpy_boundingBoxes_boun

