// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module feature_Loop_memcpy_featureh_featureHi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_featureh_AWVALID,
        m_axi_featureh_AWREADY,
        m_axi_featureh_AWADDR,
        m_axi_featureh_AWID,
        m_axi_featureh_AWLEN,
        m_axi_featureh_AWSIZE,
        m_axi_featureh_AWBURST,
        m_axi_featureh_AWLOCK,
        m_axi_featureh_AWCACHE,
        m_axi_featureh_AWPROT,
        m_axi_featureh_AWQOS,
        m_axi_featureh_AWREGION,
        m_axi_featureh_AWUSER,
        m_axi_featureh_WVALID,
        m_axi_featureh_WREADY,
        m_axi_featureh_WDATA,
        m_axi_featureh_WSTRB,
        m_axi_featureh_WLAST,
        m_axi_featureh_WID,
        m_axi_featureh_WUSER,
        m_axi_featureh_ARVALID,
        m_axi_featureh_ARREADY,
        m_axi_featureh_ARADDR,
        m_axi_featureh_ARID,
        m_axi_featureh_ARLEN,
        m_axi_featureh_ARSIZE,
        m_axi_featureh_ARBURST,
        m_axi_featureh_ARLOCK,
        m_axi_featureh_ARCACHE,
        m_axi_featureh_ARPROT,
        m_axi_featureh_ARQOS,
        m_axi_featureh_ARREGION,
        m_axi_featureh_ARUSER,
        m_axi_featureh_RVALID,
        m_axi_featureh_RREADY,
        m_axi_featureh_RDATA,
        m_axi_featureh_RLAST,
        m_axi_featureh_RID,
        m_axi_featureh_RUSER,
        m_axi_featureh_RRESP,
        m_axi_featureh_BVALID,
        m_axi_featureh_BREADY,
        m_axi_featureh_BRESP,
        m_axi_featureh_BID,
        m_axi_featureh_BUSER,
        featureh1_dout,
        featureh1_empty_n,
        featureh1_read,
        featureHist_address0,
        featureHist_ce0,
        featureHist_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 8'b100;
parameter    ap_ST_st6_fsm_3 = 8'b1000;
parameter    ap_ST_st7_fsm_4 = 8'b10000;
parameter    ap_ST_st8_fsm_5 = 8'b100000;
parameter    ap_ST_st9_fsm_6 = 8'b1000000;
parameter    ap_ST_st10_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_200 = 32'b1000000000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_featureh_AWVALID;
input   m_axi_featureh_AWREADY;
output  [31:0] m_axi_featureh_AWADDR;
output  [0:0] m_axi_featureh_AWID;
output  [31:0] m_axi_featureh_AWLEN;
output  [2:0] m_axi_featureh_AWSIZE;
output  [1:0] m_axi_featureh_AWBURST;
output  [1:0] m_axi_featureh_AWLOCK;
output  [3:0] m_axi_featureh_AWCACHE;
output  [2:0] m_axi_featureh_AWPROT;
output  [3:0] m_axi_featureh_AWQOS;
output  [3:0] m_axi_featureh_AWREGION;
output  [0:0] m_axi_featureh_AWUSER;
output   m_axi_featureh_WVALID;
input   m_axi_featureh_WREADY;
output  [15:0] m_axi_featureh_WDATA;
output  [1:0] m_axi_featureh_WSTRB;
output   m_axi_featureh_WLAST;
output  [0:0] m_axi_featureh_WID;
output  [0:0] m_axi_featureh_WUSER;
output   m_axi_featureh_ARVALID;
input   m_axi_featureh_ARREADY;
output  [31:0] m_axi_featureh_ARADDR;
output  [0:0] m_axi_featureh_ARID;
output  [31:0] m_axi_featureh_ARLEN;
output  [2:0] m_axi_featureh_ARSIZE;
output  [1:0] m_axi_featureh_ARBURST;
output  [1:0] m_axi_featureh_ARLOCK;
output  [3:0] m_axi_featureh_ARCACHE;
output  [2:0] m_axi_featureh_ARPROT;
output  [3:0] m_axi_featureh_ARQOS;
output  [3:0] m_axi_featureh_ARREGION;
output  [0:0] m_axi_featureh_ARUSER;
input   m_axi_featureh_RVALID;
output   m_axi_featureh_RREADY;
input  [15:0] m_axi_featureh_RDATA;
input   m_axi_featureh_RLAST;
input  [0:0] m_axi_featureh_RID;
input  [0:0] m_axi_featureh_RUSER;
input  [1:0] m_axi_featureh_RRESP;
input   m_axi_featureh_BVALID;
output   m_axi_featureh_BREADY;
input  [1:0] m_axi_featureh_BRESP;
input  [0:0] m_axi_featureh_BID;
input  [0:0] m_axi_featureh_BUSER;
input  [31:0] featureh1_dout;
input   featureh1_empty_n;
output   featureh1_read;
output  [8:0] featureHist_address0;
output   featureHist_ce0;
input  [15:0] featureHist_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_featureh_AWVALID;
reg m_axi_featureh_WVALID;
reg m_axi_featureh_BREADY;
reg featureh1_read;
reg featureHist_ce0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
reg   [9:0] indvar1_i_reg_95;
reg   [31:0] featureh_addr_reg_143;
reg    ap_sig_bdd_108;
wire   [0:0] exitcond4_i_fu_126_p2;
reg   [0:0] exitcond4_i_reg_148;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_118;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1;
reg    ap_sig_ioackin_m_axi_featureh_WREADY;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [9:0] indvar_next1_i_fu_132_p2;
reg   [15:0] featureHist_load_reg_162;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_151;
reg    ap_sig_ioackin_m_axi_featureh_AWREADY;
wire   [63:0] tmp_4_i_fu_138_p1;
wire   [63:0] tmp_10_fu_116_p1;
reg    ap_reg_ioackin_m_axi_featureh_AWREADY = 1'b0;
reg    ap_reg_ioackin_m_axi_featureh_WREADY = 1'b0;
reg    ap_sig_cseq_ST_st10_fsm_7;
reg    ap_sig_bdd_188;
wire   [30:0] tmp_fu_106_p4;
reg   [7:0] ap_NS_fsm;
reg    ap_sig_bdd_176;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(m_axi_featureh_BVALID == ap_const_logic_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_m_axi_featureh_AWREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY)) begin
                ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == m_axi_featureh_AWREADY)) begin
                ap_reg_ioackin_m_axi_featureh_AWREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_m_axi_featureh_WREADY
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_176) begin
            if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
                ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == m_axi_featureh_WREADY)) begin
                ap_reg_ioackin_m_axi_featureh_WREADY <= ap_const_logic_1;
            end
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_i_fu_126_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_i_fu_126_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_i_fu_126_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY))) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY))) begin
        indvar1_i_reg_95 <= ap_const_lv10_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_i_fu_126_p2))) begin
        indvar1_i_reg_95 <= indvar_next1_i_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 <= exitcond4_i_reg_148;
        exitcond4_i_reg_148 <= exitcond4_i_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond4_i_reg_148))) begin
        featureHist_load_reg_162 <= featureHist_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_108)) begin
        featureh_addr_reg_143[30 : 0] <= tmp_10_fu_116_p1[30 : 0];
    end
end

always @ (ap_done_reg or m_axi_featureh_BVALID or ap_sig_cseq_ST_st10_fsm_7) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(m_axi_featureh_BVALID == ap_const_logic_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (m_axi_featureh_BVALID or ap_sig_cseq_ST_st10_fsm_7) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(m_axi_featureh_BVALID == ap_const_logic_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_118) begin
    if (ap_sig_bdd_118) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_188) begin
    if (ap_sig_bdd_188) begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_27) begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_151) begin
    if (ap_sig_bdd_151) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (m_axi_featureh_AWREADY or ap_reg_ioackin_m_axi_featureh_AWREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_featureh_AWREADY)) begin
        ap_sig_ioackin_m_axi_featureh_AWREADY = m_axi_featureh_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_featureh_AWREADY = ap_const_logic_1;
    end
end

always @ (m_axi_featureh_WREADY or ap_reg_ioackin_m_axi_featureh_WREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_featureh_WREADY)) begin
        ap_sig_ioackin_m_axi_featureh_WREADY = m_axi_featureh_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_featureh_WREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 or ap_sig_ioackin_m_axi_featureh_WREADY or ap_reg_ppiten_pp0_it2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        featureHist_ce0 = ap_const_logic_1;
    end else begin
        featureHist_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_108) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_108)) begin
        featureh1_read = ap_const_logic_1;
    end else begin
        featureh1_read = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_reg_ioackin_m_axi_featureh_AWREADY) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_featureh_AWREADY))) begin
        m_axi_featureh_AWVALID = ap_const_logic_1;
    end else begin
        m_axi_featureh_AWVALID = ap_const_logic_0;
    end
end

always @ (m_axi_featureh_BVALID or ap_sig_cseq_ST_st10_fsm_7) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_7) & ~(m_axi_featureh_BVALID == ap_const_logic_0))) begin
        m_axi_featureh_BREADY = ap_const_logic_1;
    end else begin
        m_axi_featureh_BREADY = ap_const_logic_0;
    end
end

always @ (ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 or ap_reg_ppiten_pp0_it2 or ap_reg_ioackin_m_axi_featureh_WREADY) begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_featureh_WREADY))) begin
        m_axi_featureh_WVALID = ap_const_logic_1;
    end else begin
        m_axi_featureh_WVALID = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or m_axi_featureh_BVALID or ap_sig_bdd_108 or exitcond4_i_fu_126_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 or ap_sig_ioackin_m_axi_featureh_WREADY or ap_reg_ppiten_pp0_it2 or ap_sig_ioackin_m_axi_featureh_AWREADY) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_108) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_AWREADY)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_i_fu_126_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_0 == ap_sig_ioackin_m_axi_featureh_WREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond4_i_fu_126_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st6_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end
        end
        ap_ST_st6_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_4;
        end
        ap_ST_st7_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_5;
        end
        ap_ST_st8_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_6;
        end
        ap_ST_st9_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_7;
        end
        ap_ST_st10_fsm_7 : 
        begin
            if (~(m_axi_featureh_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_7;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_start or ap_done_reg or featureh1_empty_n) begin
    ap_sig_bdd_108 = ((featureh1_empty_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_118 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_151 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1 or ap_reg_ppiten_pp0_it2) begin
    ap_sig_bdd_176 = ((ap_const_lv1_0 == ap_reg_ppstg_exitcond4_i_reg_148_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_188 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

assign exitcond4_i_fu_126_p2 = (indvar1_i_reg_95 == ap_const_lv10_200? 1'b1: 1'b0);

assign featureHist_address0 = tmp_4_i_fu_138_p1;

assign indvar_next1_i_fu_132_p2 = (indvar1_i_reg_95 + ap_const_lv10_1);

assign m_axi_featureh_ARADDR = ap_const_lv32_0;

assign m_axi_featureh_ARBURST = ap_const_lv2_0;

assign m_axi_featureh_ARCACHE = ap_const_lv4_0;

assign m_axi_featureh_ARID = ap_const_lv1_0;

assign m_axi_featureh_ARLEN = ap_const_lv32_0;

assign m_axi_featureh_ARLOCK = ap_const_lv2_0;

assign m_axi_featureh_ARPROT = ap_const_lv3_0;

assign m_axi_featureh_ARQOS = ap_const_lv4_0;

assign m_axi_featureh_ARREGION = ap_const_lv4_0;

assign m_axi_featureh_ARSIZE = ap_const_lv3_0;

assign m_axi_featureh_ARUSER = ap_const_lv1_0;

assign m_axi_featureh_ARVALID = ap_const_logic_0;

assign m_axi_featureh_AWADDR = featureh_addr_reg_143;

assign m_axi_featureh_AWBURST = ap_const_lv2_0;

assign m_axi_featureh_AWCACHE = ap_const_lv4_0;

assign m_axi_featureh_AWID = ap_const_lv1_0;

assign m_axi_featureh_AWLEN = ap_const_lv32_200;

assign m_axi_featureh_AWLOCK = ap_const_lv2_0;

assign m_axi_featureh_AWPROT = ap_const_lv3_0;

assign m_axi_featureh_AWQOS = ap_const_lv4_0;

assign m_axi_featureh_AWREGION = ap_const_lv4_0;

assign m_axi_featureh_AWSIZE = ap_const_lv3_0;

assign m_axi_featureh_AWUSER = ap_const_lv1_0;

assign m_axi_featureh_RREADY = ap_const_logic_0;

assign m_axi_featureh_WDATA = featureHist_load_reg_162;

assign m_axi_featureh_WID = ap_const_lv1_0;

assign m_axi_featureh_WLAST = ap_const_logic_0;

assign m_axi_featureh_WSTRB = ap_const_lv2_3;

assign m_axi_featureh_WUSER = ap_const_lv1_0;

assign tmp_10_fu_116_p1 = tmp_fu_106_p4;

assign tmp_4_i_fu_138_p1 = indvar1_i_reg_95;

assign tmp_fu_106_p4 = {{featureh1_dout[ap_const_lv32_1F : ap_const_lv32_1]}};
always @ (posedge ap_clk) begin
    featureh_addr_reg_143[31] <= 1'b0;
end



endmodule //feature_Loop_memcpy_featureh_featureHi

